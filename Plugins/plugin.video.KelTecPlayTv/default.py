# encoded by pyprotect
# https://keltecmp.net/pyprotect

import base64, codecs
magic = '# -*- coding: UTF-8 -*-
try :
 import urllib . parse as urllib
except ImportError :
 import urllib
try :
 import urllib2
except ImportError :
 import urllib . request as urllib2
import re
import os
import sys
try :
 import cookielib
except ImportError :
 import http . cookiejar as cookielib
from urllib import request as urllib2 , parse as urllib
import datetime
from datetime import datetime
if 64 - 64: i11iIiiIii
import re
import os
import sys
import hashlib
if 65 - 65: O0 / iIii1I11I1II1 % OoooooooOO - i1IIi
if 73 - 73: II111iiii
import urllib . error
import urllib . parse
import urllib . parse
import urllib . request
import uuid as random
if 22 - 22: I1IiiI * Oo0Ooo / OoO0O00 . OoOoOO00 . o0oOOo0O0Ooo / I1ii11iIi11i
import xbmcaddon
import xbmcgui
import xbmcplugin
if 48 - 48: oO0o / OOooOOo / I11i / Ii1I
import resources . lib . common as common
if 48 - 48: iII111i % IiII + I1Ii111 / ooOoO0o * Ii1I
import base64
import codecs
import xbmc
if 46 - 46: ooOoO0o * I11i - OoooooooOO
import xbmcaddon
import xbmcvfs
import traceback
import time
if 30 - 30: o0oOOo0O0Ooo - O0 % o0oOOo0O0Ooo - OoooooooOO * O0 * OoooooooOO
import webbrowser
import platform
if 60 - 60: iIii1I11I1II1 / i1IIi * oO0o - I1ii11iIi11i + o0oOOo0O0Ooo
if 94 - 94: i1IIi % Oo0Ooo
if 68 - 68: Ii1I / O0
if 46 - 46: O0 * II111iiii / IiII * Oo0Ooo * iII111i . I11i
if 62 - 62: i11iIiiIii - II111iiii % I1Ii111 - iIii1I11I1II1 . I1ii11iIi11i . II111iiii
OOoO = 'plugin.video.KelTecPlayTv'
OOo = xbmcaddon . Addon ( OOoO )
Ii1IIii11 = OOo . getAddonInfo ( "name" )
Oooo0000 = OOo . getAddonInfo ( 'icon' )
i11 = OOo . getAddonInfo ( 'path' )
I11 = i11 + '/fanart.jpg'
Oo0o0000o0o0 = i11 + '/icon.gif'
if 86 - 86: OoOoOO00 % I1IiiI
if 80 - 80: OoooooooOO . I1IiiI
OOO0O = OOo . getAddonInfo ( 'path' )
oo0ooO0oOOOOo = os . path . join ( OOO0O , "resources" , "images" )
if 71 - 71: I1Ii111
O0OoOoo00o = os . path . join ( OOO0O , 'resources' , 'lib' )
sys . path . insert ( 0 , O0OoOoo00o )
import common
if 31 - 31: II111iiii + OoO0O00 . I1Ii111
OoOooOOOO = xbmcvfs . translatePath ( OOo . getAddonInfo ( "profile" ) )
i11iiII = os . path . join ( OoOooOOOO , "cache" )
if not os . path . exists ( i11iiII ) :
 os . makedirs ( i11iiII )
 if 34 - 34: OOooOOo % OoooooooOO / i1IIi . iII111i + O0
I1Ii = os . path . join ( OOO0O , "resources" , "common" , "init.py" )
o0oOo0Ooo0O = os . path . join ( OoOooOOOO , "virtual_directoriesLists.txt" )
OO00O0O0O00Oo = os . path . join ( OoOooOOOO , 'tempList.txt' )
IIIiiiiiIii = os . path . join ( OoOooOOOO , 'favorites.txt' )
if 70 - 70: OoO0O00 . OoO0O00 - OoO0O00 / I1ii11iIi11i * OOooOOo
if not ( os . path . isfile ( IIIiiiiiIii ) ) :
 common . SaveList ( IIIiiiiiIii , [ ] )
 if 86 - 86: i11iIiiIii + Ii1I + ooOoO0o * I11i + o0oOOo0O0Ooo
if not ( os . path . isfile ( o0oOo0Ooo0O ) ) :
 common . SaveList ( o0oOo0Ooo0O , [ ] )
 if 61 - 61: OoO0O00 / i11iIiiIii
IiIiIi = OOo . getSetting ( "makeGroups" ) == "true"
if 40 - 40: oO0o . OoOoOO00 . Oo0Ooo . i1IIi
if 33 - 33: Ii1I + II111iiii % i11iIiiIii . ooOoO0o - I1IiiI
def O00oooo0O ( id ) :
 return OOo . getLocalizedString ( id )
 if 22 - 22: OoooooooOO % I11i - iII111i . iIii1I11I1II1 * i11iIiiIii
 if 32 - 32: Oo0Ooo * O0 % oO0o % Ii1I . IiII
def o0OOOOO00o0O0 ( chList , addToVdir = True ) :
 if 71 - 71: ooOoO0o % iII111i / o0oOOo0O0Ooo
 ii11i1iIII = [ ]
 Ii1IOo0o0 = 0
 if 49 - 49: oO0o % Ii1I + i1IIi . I1IiiI % I1ii11iIi11i
 for I1i1iii in chList :
  i1iiI11I = 1 if '.plx' in I1i1iii [ "url" ] else 2
  iiii = common . GetEncodeString ( I1i1iii [ "name" ] )
  if 54 - 54: I1ii11iIi11i * OOooOOo
  I1IIIii = I1i1iii . get ( 'image' , '' )
  oOoOooOo0o0 = I1i1iii [ "uuid" ]
  if 61 - 61: o0oOOo0O0Ooo / OoO0O00 + ooOoO0o * oO0o / oO0o
  if I1IIIii == "" or I1IIIii is None :
   I1IIIii = os . path . join ( oo0ooO0oOOOOo , "default-list-image.gif" )
   if 75 - 75: i1IIi / OoooooooOO - O0 / OoOoOO00 . II111iiii - i1IIi
  O000OO0 = I1i1iii . get ( 'logos' , '' )
  I11iii1Ii = I1i1iii . get ( 'cache' , '0' )
  if I1i1iii [ "url" ] . startswith ( 'http' ) :
   ii11i1iIII . append ( hashlib . md5 ( I1i1iii [ "url" ] . encode ( ) ) . hexdigest ( ) )
  I1IIiiIiii ( "{0}" . format ( iiii ) , I1i1iii [ "url" ] , i1iiI11I , I1IIIii , O000OO0 , index = Ii1IOo0o0 , uuid = oOoOooOo0o0 , cacheMin = I11iii1Ii , addToVdir = addToVdir )
  Ii1IOo0o0 += 1
  if 97 - 97: ooOoO0o - OOooOOo * i11iIiiIii / OoOoOO00 % I1Ii111 - OoooooooOO
 for OoOo00o in os . listdir ( i11iiII ) :
  o0OOoo0OO0OOO = os . path . join ( i11iiII , OoOo00o )
  try :
   if os . path . isfile ( o0OOoo0OO0OOO ) and OoOo00o not in ii11i1iIII :
    os . unlink ( o0OOoo0OO0OOO )
  except Exception as iI1iI1I1i1I :
   xbmc . log ( "{0}" . format ( iI1iI1I1i1I ) , 3 )
   if 24 - 24: I1ii11iIi11i
   if 56 - 56: ooOoO0o
def o0O ( ) :
 I1IIiiIiii ( "[B][COLOR dimgrey]||[/COLOR][COLOR crimson]||[/COLOR][COLOR dimgrey]||[/COLOR][COLOR white] BEM VINDOS [/COLOR][COLOR dimgrey]||[/COLOR][COLOR crimson]||[/COLOR][COLOR dimgrey]||[/COLOR][/B]{0}" . format ( O00oooo0O ( 0 ) ) , "BEM VINDOS" , 52 , Oo0o0000o0o0 , I11 , isFolder = True )
 if 72 - 72: iII111i / i1IIi * Oo0Ooo - I1Ii111
 I1IIiiIiii ( "[B][COLOR dimgrey]|[/COLOR][COLOR crimson]|[/COLOR][COLOR dimgrey]|[/COLOR] [COLOR white]MANTER [COLOR crimson]|[/COLOR] ADD-ON [COLOR crimson]|[/COLOR] ONLINE[/COLOR] [COLOR dimgrey]|[/COLOR][COLOR crimson]|[/COLOR][COLOR dimgrey]|[/COLOR][/B]{0}" . format ( O00oooo0O ( 0 ) ) , "MANTER ADD-ON ONLINE" , 48 , os . path . join ( oo0ooO0oOOOOo , "bright_yellow_star.gif" ) )
 I1IIiiIiii ( "[B][COLOR white]KeTec[/COLOR] [COLOR crimson]Play TV[/COLOR][/B][COLOR orange] | [/COLOR]{0}" . format ( O00oooo0O ( 30003 ) ) , "favorites" , 30 , os . path . join ( oo0ooO0oOOOOo , "bright_yellow_star.gif" ) )
 if 51 - 51: II111iiii * OoO0O00 % o0oOOo0O0Ooo * II111iiii % I1ii11iIi11i / ooOoO0o
 if 49 - 49: o0oOOo0O0Ooo
 IIii1Ii1 = common . ReadList ( o0oOo0Ooo0O )
 I1II11IiII = 0
 for OOO0OOo in IIii1Ii1 :
  I1I111 = OOO0OOo [ "icon" ] if not OOO0OOo [ "icon" ] == "" else os . path . join ( oo0ooO0oOOOOo , "default-folder-image.gif" )
  I1IIiiIiii ( "[COLOR lime][B]{0}[/B][/COLOR]" . format ( OOO0OOo [ "name" ] ) , "{0}" . format ( I1II11IiII ) , 44 , I1I111 , uuid = OOO0OOo [ "uuid" ] , isFolder = True )
  I1II11IiII += 1
  if 39 - 39: Ii1I % IiII
 i111IiI1I = [ ]
 for O0iII in IIii1Ii1 :
  if len ( O0iII [ "data" ] ) > 0 :
   i111IiI1I += O0iII [ "data" ]
   if 80 - 80: IiII . oO0o
 Ii1IOo0o0 = 0
 IIi = common . ReadList ( I1Ii )
 i11iIIIIIi1 = [ ]
 try :
  for iiII1i1 in IIi :
   if "uuid" in iiII1i1 and not iiII1i1 [ "uuid" ] in i111IiI1I :
    i11iIIIIIi1 . append ( IIi [ Ii1IOo0o0 ] )
   Ii1IOo0o0 += 1
 except :
  i11iIIIIIi1 = IIi
  if 66 - 66: OOooOOo - I11i
 o0OOOOO00o0O0 ( i11iIIIIIi1 )
 if 5 - 5: I1Ii111 + Ii1I / Oo0Ooo - oO0o
 I1IIiiIiii ( "[B]{0}: {1}[/B] - {2} " . format ( O00oooo0O ( 30036 ) , O00oooo0O ( 30037 ) if IiIiIi else O00oooo0O ( 30038 ) , O00oooo0O ( 30039 ) ) , "setting" , 50 , os . path . join ( oo0ooO0oOOOOo , "setting.gif" ) , isFolder = False )
 if 63 - 63: OOooOOo % oO0o * oO0o * OoO0O00 / I1ii11iIi11i
 if 74 - 74: II111iiii
 if 75 - 75: o0oOOo0O0Ooo . ooOoO0o
def Oo0O00Oo0o0 ( ) :
 O00O0oOO00O00 = i1 ( O00oooo0O ( 30004 ) ) . strip ( )
 if len ( O00O0oOO00O00 ) < 1 :
  return
 Oo00 = i1i ( 30002 , 30005 , 30006 , 30016 , 30017 , fileType = 1 , fileMask = '.plx|.m3u|.m3u8' )
 if len ( Oo00 ) < 1 :
  return
 I1IIIii = i1i ( 30022 , 30022 , 30022 , 30024 , 30025 , 30021 , fileType = 2 )
 iiI111I1iIiI = '' if Oo00 . endswith ( '.plx' ) else i1i ( 30018 , 30019 , 30020 , 30019 , 30020 , 30021 , fileType = 0 )
 if iiI111I1iIiI . startswith ( 'http' ) and not iiI111I1iIiI . endswith ( '/' ) :
  iiI111I1iIiI += '/'
 II = Ii1I1IIii1II ( O00oooo0O ( 30034 ) , '0' ) if Oo00 . startswith ( 'http' ) else 0
 if II is None :
  II = 0
 IIi = common . ReadList ( I1Ii )
 for I1i1iii in IIi :
  if I1i1iii [ "url" ] . lower ( ) == Oo00 . lower ( ) :
   xbmc . executebuiltin ( 'Notification({0}, "{1}" {2}, 5000, {3})' . format ( Ii1IIii11 , I1i1iii [ "name" ] , O00oooo0O ( 30007 ) , Oooo0000 ) )
   return
 IIi . append ( { "name" : O00O0oOO00O00 , "url" : Oo00 , "image" : I1IIIii , "logos" : iiI111I1iIiI , "cache" : II , "uuid" : str ( random . uuid4 ( ) ) } )
 if common . SaveList ( I1Ii , IIi ) :
  xbmc . executebuiltin ( "Container.Refresh()" )
  if 65 - 65: Ii1I . iIii1I11I1II1 / O0 - Ii1I
  if 21 - 21: I1IiiI * iIii1I11I1II1
def i1i ( choiceTitle , fileTitle , urlTitle , choiceFile , choiceUrl , choiceNone = None , fileType = 1 , fileMask = None , defaultText = "" ) :
 oooooOoo0ooo = ''
 I1I1IiI1 = [ O00oooo0O ( choiceFile ) , O00oooo0O ( choiceUrl ) ]
 if choiceNone is not None :
  I1I1IiI1 = [ O00oooo0O ( choiceNone ) ] + I1I1IiI1
 III1iII1I1ii = oOOo0 ( O00oooo0O ( choiceTitle ) , I1I1IiI1 )
 if choiceNone is None and III1iII1I1ii == 0 or choiceNone is not None and III1iII1I1ii == 1 :
  if not defaultText . startswith ( 'http' ) :
   defaultText = ""
  oooooOoo0ooo = i1 ( O00oooo0O ( fileTitle ) , defaultText ) . strip ( )
 elif choiceNone is None and III1iII1I1ii == 1 or choiceNone is not None and III1iII1I1ii == 2 :
  if defaultText . startswith ( 'http' ) :
   defaultText = ""
  oooooOoo0ooo = xbmcgui . Dialog ( ) . browse ( fileType , O00oooo0O ( urlTitle ) , 'files' , fileMask , False , False , defaultText )
 return oooooOoo0ooo
 if 54 - 54: O0 - IiII % OOooOOo
 if 77 - 77: OoOoOO00 / I1IiiI / OoO0O00 + OoO0O00 . OOooOOo
def ii1ii11IIIiiI ( iuuid , listFile ) :
 if 67 - 67: I11i * oO0o * I1ii11iIi11i + OOooOOo / i1IIi
 IIi = common . ReadList ( listFile )
 I1I111Oo00oo0oO = common . ReadList ( o0oOo0Ooo0O )
 if 1 - 1: OoO0O00 - oO0o . I11i . OoO0O00 / Oo0Ooo + I11i
 Ii1IOo0o0 = 0
 for Ooo in IIi :
  if Ooo [ "uuid" ] == iuuid :
   del IIi [ Ii1IOo0o0 ]
  Ii1IOo0o0 += 1
  if 62 - 62: OOooOOo / OoO0O00 + Ii1I / OoO0O00 . II111iiii
  if 68 - 68: i11iIiiIii % I1ii11iIi11i + i11iIiiIii
 for OOO0OOo in I1I111Oo00oo0oO :
  Ii1IOo0o0 = 0
  for oOoOooOo0o0 in OOO0OOo [ "data" ] :
   if iuuid in oOoOooOo0o0 :
    del OOO0OOo [ "data" ] [ Ii1IOo0o0 ]
   Ii1IOo0o0 += 1
   if 31 - 31: II111iiii . I1IiiI
 common . SaveList ( listFile , IIi )
 common . SaveList ( o0oOo0Ooo0O , I1I111Oo00oo0oO )
 if 1 - 1: Oo0Ooo / o0oOOo0O0Ooo % iII111i * IiII . i11iIiiIii
 xbmc . executebuiltin ( "Container.Refresh()" )
 if 2 - 2: I1ii11iIi11i * I11i - iIii1I11I1II1 + I1IiiI . oO0o % iII111i
 if 92 - 92: iII111i
def IIiIiiIi ( index ) :
 if 51 - 51: I11i + iII111i % iIii1I11I1II1 / oO0o / OOooOOo % OoooooooOO
 o0O0OOO0Ooo = common . ReadList ( IIIiiiiiIii )
 if index < 0 or index >= len ( o0O0OOO0Ooo ) :
  return
 del o0O0OOO0Ooo [ index ]
 common . SaveList ( IIIiiiiiIii , o0O0OOO0Ooo )
 xbmc . executebuiltin ( "Container.Refresh()" )
 if 45 - 45: O0 / o0oOOo0O0Ooo
 if 32 - 32: iII111i . IiII . IiII
def OO00O0O ( url , cache ) :
 iii = [ ]
 IIi = common . plx2list ( url , cache )
 oOooOOOoOo = IIi [ 0 ] [ "background" ]
 for i1Iii1i1I in IIi [ 1 : ] :
  OOoO00 = "" if "thumb" not in i1Iii1i1I else common . GetEncodeString ( i1Iii1i1I [ "thumb" ] )
  iiii = common . GetEncodeString ( i1Iii1i1I [ "name" ] )
  if i1Iii1i1I [ "type" ] == 'playlist' :
   I1IIiiIiii ( "{0}" . format ( iiii ) , i1Iii1i1I [ "url" ] , 1 , OOoO00 , background = oOooOOOoOo )
  else :
   I1IIiiIiii ( iiii , i1Iii1i1I [ "url" ] , 3 , OOoO00 , isFolder = False , IsPlayable = True , background = oOooOOOoOo )
   iii . append ( { "url" : i1Iii1i1I [ "url" ] , "image" : OOoO00 , "name" : iiii } )
   if 40 - 40: I1IiiI * Ii1I + OOooOOo % iII111i
 common . SaveList ( OO00O0O0O00Oo , iii )
 if 74 - 74: oO0o - Oo0Ooo + OoooooooOO + I1Ii111 / OoOoOO00
 if 23 - 23: O0
def o00oO0oOo00 ( url , logos , cache , gListIndex = - 1 ) :
 if 81 - 81: OoO0O00
 IIi1 = None
 if 45 - 45: iII111i / iII111i + I1Ii111 + ooOoO0o
 iii = [ ]
 IIi = common . m3u2list ( url , cache )
 iI111i = [ ]
 if 26 - 26: I1ii11iIi11i * iII111i . II111iiii * Ii1I
 for i1Iii1i1I in IIi :
  if IiIiIi :
   II1 = [ iI111i . index ( iiiIi1 ) for iiiIi1 in iI111i if len ( iiiIi1 ) > 0 and iiiIi1 [ 0 ] . get ( "group_title" , iiiIi1 [ 0 ] [ "display_name" ] ) == i1Iii1i1I . get ( "group_title" , i1Iii1i1I [ "display_name" ] ) ]
   if 38 - 38: I1Ii111
  if IiIiIi and len ( II1 ) == 1 :
   iI111i [ II1 [ 0 ] ] . append ( i1Iii1i1I )
  else :
   iI111i . append ( [ i1Iii1i1I ] )
   if 84 - 84: iIii1I11I1II1 % iII111i / iIii1I11I1II1 % I11i
 for ii in iI111i :
  OOooooO0Oo = iI111i . index ( ii )
  if gListIndex > - 1 and gListIndex != OOooooO0Oo :
   continue
  OO = gListIndex < 0 and len ( ii ) > 1
  iIiIIi1 = [ ii [ 0 ] ] if OO else ii
  if 7 - 7: ooOoO0o - Oo0Ooo - oO0o + ooOoO0o
  for i1Iii1i1I in iIiIIi1 :
   iiii = common . GetEncodeString ( i1Iii1i1I [ "display_name" ] ) if not OO else common . GetEncodeString ( i1Iii1i1I . get ( "group_title" , i1Iii1i1I [ "display_name" ] ) )
   iI1I11iiI1i = "" if IIi1 is None else IIi1 [ i1Iii1i1I [ "group_title" ] ] [ "overview" ] if i1Iii1i1I [ "group_title" ] in IIi1 else ""
   I11 = "" if IIi1 is None else IIi1 [ i1Iii1i1I [ "group_title" ] ] [ "fanarts" ] [ 0 ] if ( i1Iii1i1I [ "group_title" ] in IIi1 and len ( IIi1 [ i1Iii1i1I [ "group_title" ] ] [ "fanarts" ] ) > 0 ) else ""
   if 78 - 78: oO0o % O0 % Ii1I
   if OO :
    iiii = '{0}' . format ( iiii )
    iiI1Ii1iI1 = url
    try :
     I1IIIii = i1Iii1i1I [ 'tvg_logo' ] if IIi1 is None else IIi1 [ i1Iii1i1I [ "group_title" ] ] [ "poster" ] if i1Iii1i1I [ "group_title" ] in IIi1 else i1Iii1i1I [ 'tvg_logo' ]
    except KeyError :
     I1IIIii = "DefaultTVShows.gif"
    I1IIiiIiii ( iiii , url , 10 , index = OOooooO0Oo , iconimage = I1IIIii , plot = iI1I11iiI1i , fanart = I11 )
   else :
    iiI1Ii1iI1 = common . GetEncodeString ( i1Iii1i1I [ "url" ] )
    I1IIIii = i1Iii1i1I . get ( "tvg_logo" , i1Iii1i1I . get ( "logo" , "" ) )
    if logos is not None and logos != '' and I1IIIii != "" and not I1IIIii . startswith ( 'http' ) :
     I1IIIii = logos + I1IIIii
    I1IIiiIiii ( iiii , iiI1Ii1iI1 , 3 , I1IIIii , index = - 1 , isFolder = False , IsPlayable = True , plot = iI1I11iiI1i , fanart = I11 )
   iii . append ( { "url" : iiI1Ii1iI1 , "image" : I1IIIii , "name" : iiii } )
   if 87 - 87: Oo0Ooo . IiII
 common . SaveList ( OO00O0O0O00Oo'
love = ''
god = ': index ] + tList [ index + 1 : index + 1 + step ] + [ tList [ index ] ] + tList [ index + 1 + step : ]
   if 24 - 24: Oo0Ooo - oO0o % iIii1I11I1II1 . i1IIi / O0
  else :
   return None
   if 36 - 36: I1IiiI - I11i
  return I1i11i
  if 29 - 29: ooOoO0o * OOooOOo
 o0o0O = common . ReadList ( listFile )
 if 10 - 10: I1Ii111 % IiII * IiII . I11i / Ii1I % OOooOOo
 if 49 - 49: OoO0O00 / oO0o + O0 * o0oOOo0O0Ooo
 dir = False
 Iii1 = common . ReadList ( o0oOo0Ooo0O )
 for O0iII in Iii1 :
  I1ii11 = [ oOoOooOo0o0 for oOoOooOo0o0 in O0iII [ "data" ] ]
  if iuuid in I1ii11 :
   dir = O0iII
   if 74 - 74: Oo0Ooo - o0oOOo0O0Ooo . i1IIi
 if not dir is False :
  if 43 - 43: iII111i / I1IiiI
  IiI1iiiIii = I1III1111iIi ( dir [ "uuid" ] )
  if 58 - 58: I1IiiI + i11iIiiIii % Ii1I . OoOoOO00
  Ii1i1iI = [ IIiI1 for IIiI1 in o0o0O if IIiI1 [ "uuid" ] in IiI1iiiIii ]
  i1iI1ii1 = [ IIiI1 for IIiI1 in o0o0O if IIiI1 [ "uuid" ] not in IiI1iiiIii ]
  if 1 - 1: ooOoO0o % iIii1I11I1II1 + Oo0Ooo . iIii1I11I1II1 % I1IiiI
  Ii1i1iI = i1II1I1Iii1 ( IiI1iiiIii . index ( iuuid ) , step , Ii1i1iI )
  if 89 - 89: Ii1I
  if not Ii1i1iI is None :
   common . SaveList ( listFile , i1iI1ii1 + Ii1i1iI )
   if 76 - 76: ooOoO0o
   if 15 - 15: OOooOOo . I11i + OoooooooOO - OoO0O00
  OOooooO0Oo = Iii1 . index ( O0iII )
  O0iII [ "data" ] = [ I1i1iii [ "uuid" ] for I1i1iii in Ii1i1iI ]
  Iii1 [ OOooooO0Oo ] = O0iII
  common . SaveList ( o0oOo0Ooo0O , Iii1 )
  if 69 - 69: iIii1I11I1II1 . I1ii11iIi11i % ooOoO0o + iIii1I11I1II1 / O0 / I1ii11iIi11i
 else :
  IiI1iiiIii = [ I1i1iii for O0OO in Iii1 for I1i1iii in I1III1111iIi ( O0OO [ "uuid" ] ) ]
  O00OoOO0oo0 = [ Ooo for Ooo in common . ReadList ( listFile ) if Ooo [ "uuid" ] in IiI1iiiIii ]
  oOO = [ Ooo for Ooo in common . ReadList ( listFile ) if not Ooo [ "uuid" ] in IiI1iiiIii ]
  if 53 - 53: I1Ii111 * IiII . Oo0Ooo - Ii1I % Ii1I * i11iIiiIii
  OOooooO0Oo = 0
  for Ooo in oOO :
   if Ooo [ "uuid" ] == iuuid :
    break
   OOooooO0Oo += 1
   if 7 - 7: O0 . Ii1I
  Ii1i1iI = i1II1I1Iii1 ( OOooooO0Oo , step , oOO )
  if 51 - 51: OoO0O00 - O0 % oO0o - II111iiii
  if not Ii1i1iI is None :
   common . SaveList ( listFile , O00OoOO0oo0 + Ii1i1iI )
   if 31 - 31: iII111i / Oo0Ooo - iII111i - OOooOOo
 xbmc . executebuiltin ( "Container.Refresh()" )
 if 7 - 7: iII111i % O0 . OoOoOO00 + I1IiiI - I11i
 if 75 - 75: I11i
def oO00oo0o00o0o ( msg ) :
 import platform
 if platform . system ( ) == 'Linux' :
  IiIIIIIi = 'Android 9; Mobile; rv:68.0'
 elif platform . system ( ) == 'Windows' :
  IiIIIIIi = 'Windows NT 6.1; WOW64; rv:54.0'
 elif platform . system ( ) == 'IOS' :
  IiIIIIIi = 'iPhone; CPU iPhone OS 12_2 like Mac OS X'
 else :
  IiIIIIIi = ''
 IiIi1iIIi1 = {
 "Accept-Language" : "en-US,en;q=0.5" ,
 "\x55\x73\x65\x72\x2d\x61\x67\x65\x6e\x74" : IiIIIIIi ,
 "Accept" : "text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8" ,
 "Referer" : "ATT-KelTec Play TV-1.0.2+Matrix" ,
 "Connection" : "keep-alive"
 }
 O0OoO0ooOO0o = urllib2 . Request ( "https://whos.amung.us/pingjs/?k=4w80f35j2b" , headers = IiIi1iIIi1 )
 OoOo0oOooOoOO = urllib2 . urlopen ( O0OoO0ooOO0o ) . read ( )
 if 60 - 60: OoooooooOO % Ii1I * i1IIi
 if 1 - 1: I1IiiI / IiII * ooOoO0o
 I1iIiIi11i11 = 0
 xbmc . sleep ( I1iIiIi11i11 * 0 )
 if 52 - 52: ooOoO0o + O0 . iII111i . I1ii11iIi11i . OoO0O00
def oo000 ( msg ) :
 try :
  iiOoO = urllib2 . urlopen ( "https://raw.githubusercontent.com/keltecmp-repo/repo/master/Plugins/plugin.video.KelTecPlayTv/version.txt" ) . read ( )
  Iiiiii111i1ii = str ( iiOoO . decode ( 'utf-8' ) ) . replace ( ' ' , '' ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
  if not Versao in Iiiiii111i1ii :
   i1i1iII1 ( )
  elif msg == True :
   if 25 - 25: iIii1I11I1II1 % iII111i . ooOoO0o
   if 14 - 14: oO0o + I1ii11iIi11i - iII111i / O0 . I1Ii111
   i1iiIiI1Ii1i ( True )
 except :
  if msg == True :
   xbmcgui . Dialog ( ) . ok ( '[COLOR white][B]AVISO[/B][/COLOR]' , "Não foi possível atualizar. Tente novamente mais tarde." )
   if 22 - 22: IiII / i11iIiiIii
def oOOoo ( msg ) :
 try :
  iiOoO = urllib2 . urlopen ( "https://raw.githubusercontent.com/keltecmp-repo/repo/master/Plugins/plugin.video.KelTecPlayTv/version.txt" ) . read ( )
  Iiiiii111i1ii = str ( iiOoO . decode ( 'utf-8' ) ) . replace ( ' ' , '' ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
  if not Versao in Iiiiii111i1ii :
   i1i1iII1 ( )
  elif msg == True :
   xbmcgui . Dialog ( ) . ok ( 'Torrent Play' , "O addon já esta na última versao: " + Versao + "\nAs atualizações normalmente são automáticas caso não atualize em\nhttps://www.keltecmp.net/\nUse esse recurso caso nao esteja recebendo automaticamente" )
 except :
  if msg == True :
   xbmcgui . Dialog ( ) . ok ( '[COLOR white][B]AVISO[/B][/COLOR]' , "Não foi possível atualizar. Tente novamente mais tarde." )
   if 14 - 14: o0oOOo0O0Ooo * oO0o
def i1i1iII1 ( ) :
 O0OOO0OOooo00 = home
 try :
  I111iIi1 = urllib2 . urlopen ( "https://raw.githubusercontent.com/keltecmp-repo/repo/master/Plugins/plugin.video.KelTecPlayTv/default.py" ) . read ( )
  if 'checkintegrity101219' in str ( I111iIi1 . decode ( 'utf-8' ) ) :
   oo00O00oO000o = os . path . join ( O0OOO0OOooo00 , "default.py" )
   file = open ( oo00O00oO000o , "w" , encoding = "utf-8" )
   file . write ( I111iIi1 . decode ( 'utf-8' ) )
   file . close ( )
  I111iIi1 = urllib2 . urlopen ( "https://raw.githubusercontent.com/keltecmp-repo/repo/master/Plugins/plugin.video.KelTecPlayTv/resources/settings.xml" ) . read ( )
  if '</settings>' in str ( I111iIi1 . decode ( 'utf-8' ) ) :
   oo00O00oO000o = os . path . join ( O0OOO0OOooo00 , "resources/settings.xml" )
   file = open ( oo00O00oO000o , "w" , encoding = "utf-8" )
   file . write ( I111iIi1 . decode ( 'utf-8' ) )
   file . close ( )
  I111iIi1 = urllib2 . urlopen ( "https://raw.githubusercontent.com/keltecmp-repo/repo/master/Plugins/plugin.video.KelTecPlayTv/addon.xml" ) . read ( )
  if '</addon>' in str ( I111iIi1 . decode ( 'utf-8' ) ) :
   oo00O00oO000o = os . path . join ( O0OOO0OOooo00 , "addon.xml" )
   file = open ( oo00O00oO000o , "w" , encoding = "utf-8" )
   file . write ( I111iIi1 . decode ( 'utf-8' ) )
   file . close ( )
  xbmcgui . Dialog ( ) . ok ( 'Torrent Play' , "OBS: Add-on desatualizaldo!\nNão se preocupe estamos atualizando o addon.\nAguarde um momento; Caso ocorrer erro,\n Por favor atualize o Add-on no Site Oficial www.keltecmp.net 👍🏻😁" )
 except :
  xbmc . executebuiltin ( "Notification({0}, {1}, 10000, {2})" . format ( addon_base , "[B][COLOR whithe]Atualizando o addon. Por favor aguarde 5 segundos e entre novamente![/COLOR][/B]" , artfolder + 'icon.png' ) )
  if 71 - 71: I1ii11iIi11i - ooOoO0o / OoOoOO00 * OoOoOO00 / i1IIi . i1IIi
  if 53 - 53: I1Ii111
  if 21 - 21: I11i
def OoO00 ( url ) :
 try :
  import urllib . request as urllib2
 except ImportError :
  import urllib2
 OO0Ooooo000Oo = urllib2 . build_opener ( )
 OO0Ooooo000Oo . addheaders = [ ( 'User-Agent' , 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0)/KelTec-Media-Play Gecko/20100101 Firefox/19.0' ) ]
 if 97 - 97: Ii1I * I1ii11iIi11i / I1IiiI / iIii1I11I1II1 % I11i
 OoOo0oOooOoOO = OO0Ooooo000Oo . open ( url )
 O0OO = OoOo0oOooOoOO . read ( ) . decode ( 'utf-8' )
 O00oO0 = O0OO
 return O00oO0
 if 97 - 97: I1Ii111 - iIii1I11I1II1
 if 75 - 75: OoooooooOO * IiII
 if 9 - 9: IiII - II111iiii + O0 / iIii1I11I1II1 / i11iIiiIii
 if 39 - 39: IiII * Oo0Ooo + iIii1I11I1II1 - IiII + OOooOOo
def i1iiIiI1Ii1i ( ) :
 o0 = OOo . getSetting ( 'mensagem1' )
 if o0 == 'true' :
  I1i1i1iii = xbmcgui . Dialog ( )
  iiiI1I1iIIIi1 = I1i1i1iii . select ( '[B][COLOR white]SUPORTE[/COLOR] [COLOR crimson]|[/COLOR] [COLOR dimgray]KelTec[/COLOR] [COLOR crimson]Media-Play [COLOR dimgrey]|[/COLOR][COLOR white] OFICIAL[/COLOR][/B]' , [ '[COLOR dimgray]KelTec[/COLOR]-[COLOR crimson]Media-Play[/COLOR][COLOR orange] |[/COLOR] SITE' , '[COLOR dimgray]KelTec[/COLOR]-[COLOR crimson]Media-Play[/COLOR][COLOR orange] |[/COLOR] AJUDAR PROJETO' , '[COLOR dimgray]KelTec[/COLOR]-[COLOR crimson]Media-Play[/COLOR][COLOR orange] |[/COLOR] [COLOR orange]TOP VIP [/COLOR]' , '[COLOR dimgray]KelTec[/COLOR]-[COLOR crimson]Media-Play[/COLOR][COLOR orange] |[/COLOR] FACEBOOK' , '[COLOR dimgray]KelTec[/COLOR]-[COLOR crimson]Media-Play[/COLOR][COLOR orange] |[/COLOR] YOUTUBE' , '[COLOR dimgray]KelTec[/COLOR]-[COLOR crimson]Media-Play[/COLOR][COLOR orange] |[/COLOR] TELEGRAM' , '[COLOR dimgray]KelTec[/COLOR]-[COLOR crimson]Media-Play[/COLOR][COLOR orange] |[/COLOR] ENTRAR NO ADD-ON' ] )
  if 17 - 17: iIii1I11I1II1 . OoooooooOO / I11i % II111iiii % i1IIi / i11iIiiIii
  if iiiI1I1iIIIi1 == 0 :
   if xbmc . getCondVisibility ( 'system.platform.android' ) :
    xbmc . executebuiltin ( 'StartAndroidActivity(,android.intent.action.VIEW,,%s)' % ( 'https://urlredir.ml/site-keltec' ) )
   else :
    OOO = webbrowser . open ( 'https://urlredir.ml/site-keltec' )
    if 30 - 30: OoooooooOO - OoooooooOO . O0 / iII111i
  if iiiI1I1iIIIi1 == 1 :
   iIiIi1I ( True )
   if 45 - 45: i1IIi + II111iiii
  if iiiI1I1iIIIi1 == 2 :
   IiII1II11I ( True )
   if 54 - 54: IiII + O0 + I11i * I1Ii111 - OOooOOo % oO0o
  if iiiI1I1iIIIi1 == 3 :
   if xbmc . getCondVisibility ( 'system.platform.android' ) :
    xbmc . executebuiltin ( 'StartAndroidActivity(,android.intent.action.VIEW,,%s)' % ( 'https://urlredir.ml/fbkeltec' ) )
   else :
    OOO = webbrowser . open ( 'https://urlredir.ml/fbkeltec' )
    if 13 - 13: ooOoO0o / iII111i * OoO0O00 . OoO0O00 * ooOoO0o
  if iiiI1I1iIIIi1 == 4 :
   if xbmc . getCondVisibility ( 'system.platform.android' ) :
    OOO = xbmc . executebuiltin ( 'StartAndroidActivity(,android.intent.action.VIEW,,%s)' % ( 'https://urlredir.ml/inscrever-se-keltec-media-play' ) )
   else :
    webbrowser . open ( 'https://urlredir.ml/inscrever-se-keltec-media-play' )
    if 63 - 63: I1Ii111 / O0 * Oo0Ooo + II111iiii / IiII + Ii1I
  if iiiI1I1iIIIi1 == 5 :
   if xbmc . getCondVisibility ( 'system.platform.android' ) :
    OOO = xbmc . executebuiltin ( 'StartAndroidActivity(,android.intent.action.VIEW,,%s)' % ( 'https://urlredir.ml/telegram' ) )
   else :
    OOO = webbrowser . open ( 'https://urlredir.ml/telegram' )
    if 63 - 63: OoO0O00 + I1ii11iIi11i . I1Ii111 % I1Ii111
  if iiiI1I1iIIIi1 == 7 :
   xbmc . executebuiltin ( "XBMC.Container.Refresh('close()')" )
   xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
   if 57 - 57: II111iiii
   if 54 - 54: Oo0Ooo + oO0o + i11iIiiIii
def i1i1ii111 ( msg ) :
 IiI1i = OOo . getSetting ( 'mensagem2' )
 if IiI1i == 'true' :
  xbmc . executebuiltin ( "Notification({0}, {1}, 10000, {2})" . format ( Ii1IIii11 , "[B][COLOR orange]|[/COLOR][/B] [B]TV AO VIVO[/B] [B][COLOR orange]|[/COLOR][/B] [B]FILMES [B][COLOR orange]|[/COLOR][/B] [B]SERIES[/B] [B][COLOR orange]|[/COLOR][/B] [B]DESENHOS[/B] [B][COLOR orange]|[/COLOR][/B] [B]ANIMES[/B] [B][COLOR orange]|[/COLOR][/B] [B]MELHORES LANÇAMENTOS DUAL AUDIO[/B] [B][COLOR orange]|[/COLOR][/B]" , Oo0o0000o0o0 ) )
  if 87 - 87: ooOoO0o
def IIIii ( msg ) :
 O00OooOo00o = OOo . getSetting ( 'suporte' )
 if O00OooOo00o == 'true' :
  addDir ( titulo_suporte_vip , '' , 22 , __icon__ , '' , vip_descricao , '' , '' , '' , '' , '' , '' , '' , '' , '' , '' , '' , '' , '' , '' , '' , '' )
  if 20 - 20: i1IIi * I1Ii111 + II111iiii % o0oOOo0O0Ooo % oO0o
def iIi1II ( msg ) :
 xbmcgui . Dialog ( ) . ok ( '[B][COLOR red]AVISO IMPORTANTE![/COLOR][/B]' , 'Bem-Vindos!\nAqui temos nosso site oficial para downloads\nNosso canal no YouTube para tutoriais KelTec Media-Play\nNossos Grupos no Facebook e Telegram, para suporte' )
 I1i1i1iii = xbmcgui . Dialog ( )
 iiiI1I1iIIIi1 = I1i1i1iii . select ( '[B][COLOR white]SUPORTE [COLOR crimson]|[/COLOR] [COLOR dimgray]KelTec[/COLOR] [COLOR crimson]Media-Play [COLOR dimgrey]|[/COLOR] [COLOR white]OFICIAL[/COLOR][/B]' , [ '[COLOR dimgray]KelTec[/COLOR]-[COLOR crimson]Media-Play[/COLOR][COLOR orange] |[/COLOR] SITE' , '[COLOR dimgray]KelTec[/COLOR]-[COLOR crimson]Media-Play[/COLOR][COLOR orange] |[/COLOR] FACEBOOK' , '[COLOR dimgray]KelTec[/COLOR]-[COLOR crimson]Media-Play[/COLOR][COLOR orange] |[/COLOR] YOUTUBE' , '[COLOR dimgray]KelTec[/COLOR]-[COLOR crimson]Media-Play[/COLOR][COLOR orange] |[/COLOR] TELEGRAM' , '[COLOR dimgray]KelTec[/COLOR]-[COLOR crimson]Media-Play[/COLOR][COLOR orange] |[/COLOR] VOLTAR' ] )
 if 17 - 17: OOooOOo % Oo0Ooo / I1ii11iIi11i . IiII * OOooOOo - II111iiii
 if 41 - 41: Ii1I
def IiII1II11I ( msg ) :
 xbmcgui . Dialog ( ) . ok ( '[B][COLOR red]AVISO IMPORTANTE![/COLOR][/B]' , 'O acesso [COLOR orange]Top Vip[/COLOR] é através de aplicativo exclusivo P2P somente!.\nPare de sofrer com travamentos, solicite agora mesmo no menu a seguir...' )
 I1i1i1iii = xbmcgui . Dialog ( )
 iiiI1I1iIIIi1 = I1i1i1iii . select ( '[B][COLOR white]SUPORTE: [COLOR orange]TOP VIP[/COLOR] [COLOR crimson]|[/COLOR] [COLOR dimgray]KelTec[/COLOR] [COLOR crimson]Media-Play [COLOR dimgrey]|[/COLOR][COLOR white] P2P EXCLUSIVO[/COLOR][/B]' , [ '[COLOR dimgray]KelTec[/COLOR]-[COLOR crimson]Media-Play[/COLOR][COLOR orange] |[/COLOR] TESTE TOP VIP' , '[COLOR dimgray]KelTec[/COLOR]-[COLOR crimson]Media-Play[/COLOR][COLOR orange] |[/COLOR] DETALHES TOP VIP' , '[COLOR dimgray]KelTec[/COLOR]-[COLOR crimson]Media-Play[/COLOR][COLOR orange] |[/COLOR] APLICATIVO P2P ANDROID' , '[COLOR dimgray]KelTec[/COLOR]-[COLOR crimson]Media-Play[/COLOR][COLOR orange] |[/COLOR] APLICATIVO IPTV ANDROID' , '[COLOR dimgray]KelTec[/COLOR]-[COLOR crimson]Media-Play[/COLOR][COLOR orange] |[/COLOR] CONTINUAR NO ADD-ON' ] )
 if 77 - 77: I1Ii111
 if iiiI1I1iIIIi1 == 0 :
  if xbmc . getCondVisibility ( 'system.platform.android' ) :
   xbmc . executebuiltin ( 'StartAndroidActivity(,android.intent.action.VIEW,,%s)' % ( 'https://urlredir.ml/teste-p2p-add-on' ) )
  else :
   OOO = webbrowser . open ( 'https://urlredir.ml/teste-p2p-add-on' )
   if 65 - 65: II111iiii . I1IiiI % oO0o * OoO0O00
 if iiiI1I1iIIIi1 == 1 :
  if xbmc . getCondVisibility ( 'system.platform.android' ) :
   OOO = xbmc . executebuiltin ( 'StartAndroidActivity(,android.intent.action.VIEW,,%s)' % ( 'https://urlredir.ml/download-topvip' ) )
  else :
   webbrowser . open ( 'https://urlredir.ml/download-topvip' )
   if 38 - 38: OoOoOO00 / iII111i % Oo0Ooo
 if iiiI1I1iIIIi1 == 2 :
  if xbmc . getCondVisibility ( 'system.platform.android' ) :
   OOO = xbmc . executebuiltin ( 'StartAn'
destiny = ''
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))